rm(list=ls())
load("/Users/lichen/Dropbox/projects/junproject/SICS-raw/data/Throat.RData")
ls()
ls()
rm(list=ls())
4080800150/1024^3
194232305/1024^3
5*250/60
219800217/1024^2
10*100/60
#library(PROPER)
library(edgeR)
setwd('~/Dropbox/projects/powmicro/code')
nOTU=2000
source('utils.sim.R')
source('PROPER.R')
load('~/Dropbox/projects/powmicro/microbiomeDDA/data/combo.paras.nb.rda')
seqdepth=apply(taxaparas$otu.mat,2,sum); summary(seqdepth)
para=est.edgeR(taxaparas$otu.mat)
id=sample(1:length(para$lmu),nOTU,replace=T)
lmu0=para$lmu[id]
lphi0=para$lphi[id]
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
dim(sim.out$x.abunds)
summary(sim.out$x.abunds[,1,1])
sum(sim.out$x.abunds[,1,1])
sum(sim.out$x.abunds[,3,1])
getwd()
dim(sim.out$x.abunds)
names(sim.out$x.abunds)
apply(sim.out$x.abunds[,,1],2,sum)
getwd()
seqdepth=apply(taxaparas$otu.mat,2,sum); summary(seqdepth)
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.5,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
#apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
#apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
#apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
#apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi*2)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
#apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
apply(sim.out$x.abunds[,,1],2,sum)
sum(sim.out$x.abunds[,,1]==0)/length(sim.out$x.abunds[,,1])
dim(sim.out$x.abunds)
sum(sim.out$x.abunds[,3,1]==0)/length(sim.out$x.abunds[,3,1])
head(sim.out$x.abunds[,3,1])
sim.out$x.abunds[,3,1]
head(sim.out$x.denses[,3,1])
length(sim.out$x.denses[,3,1])
sim.out$x.denses[,3,1]
sum(sim.out$x.denses[,3,1]==0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
getwd()
getwd()
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.2,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 80), n2s = c(20, 40,80),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.5,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.2,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=0.1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
getwd()
ind=sample(1:nrow(x), round(nrow(x) * 0.01))
source('utils.sim.R')
getwd()
getwd()
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
getwd()
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=5)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
n1=n2=1
design <- c(rep(0, n1), rep(1, n2))
nOTU = sim.opts$nOTU
p.DA = sim.opts$p.DA
DAid = sample(nOTU, round(nOTU*p.DA))
lfc.mu = rep(0, nOTU)
lfc.mu[DAid] = sim.opts$lfc.mu
mu=matrix(exp(sim.opts$lmu0+c(rep(lfc.mu/2,n1),rep(-lfc.mu/2,n2))),ncol=n1+n2)
x=rnegbinom(length(mu), mu*sim.opts$depth.factor, exp(sim.opts$lphi0))
x=matrix(x,ncol=n1+n2)
dim(x)
ind=sample(1:nrow(x), round(nrow(x) * 0.1))
ind
length(ind)
ind=sample(1:nrow(x), round(nrow(x) * 0.01))
ind
length(ind)
dim(x)
sample(c(1, 2), length(ind), repl=T))
sample(c(1, 2), length(ind), repl=T)
a=round((x[ind, ])
）
a=x[ind, ]
dim(a)
sample(c(1, 2), length(ind), repl=T))
a
round((x[ind, ]) ^ sample(c(1, 2), length(ind), repl=T))
source('utils.sim.R')
simCounts.NB
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi/2)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi*2)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=para$lmu,lphi0=para$lphi)
#sim.opts = simOpts.NB(nOTU=nOTU, depth.factor=1,p.DA=0.05,lfc.mu=log(8),lmu0=lmu0,lphi0=lphi0)
counts=simCounts.NB(sim.opts,n1=1,n2=1)
sum(counts$counts==0)/length(counts$counts)
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
simCounts.NB
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
source('utils.sim.R')
source('utils.sim.R')
sim.out = runSims(n1s = c(20, 40, 60), n2s = c(20, 40,60),sim.opts=sim.opts,DAmethod="edgeR", nsims=1)
apply(sim.out$x.abunds[,,1],2,sum)
assess.out = assess(sim.out, alpha.type="fdr", alpha.level=0.05,stratify.type="density", delta=0)
sum.out=summaryAssess(assess.out,assess.type='overall')
rm(list=ls())
getwd()
setwd('~/Dropbox/projects/circRNA/')
dir()
setwd('code/pipeline/')
getwd()
require(Rsamtools)
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
res=topTags(fit, n=nrow(dat$counts))
getwd()
rm(list=ls())
6mA<-function(){}
genome()
genome
getwd()
rm(list=ls())
start
